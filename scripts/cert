#!/usr/bin/env groovy

import javax.net.ssl.*

def cli = new CliBuilder(usage: 'cert -[fhp] host')
cli.with {
f longOpt: 'file', args: 1, argName: 'path', 'File to output cert to (stdout by default)'
h longOpt: 'help', 'Show usage information'
p longOpt: 'port', args: 1, argName: 'port', 'Port to connect to (443 by default)'
}
options = cli.parse(args)
if (options.h || !options.arguments() || options.arguments().size() > 1){
    cli.usage()
    System.exit(1)
}

def certout(line){
  def log = options.f?new File(options.f):System.out
  log << "$line\n"

}

def host = options.arguments()[0]
def port = options.p?:'443'
def cert
def trustManager = [
    checkClientTrusted: { chain, authType ->  },
    checkServerTrusted: { chain, authType -> cert = chain[0] },
    getAcceptedIssuers: { null }
] as X509TrustManager

def context = SSLContext.getInstance("TLS")
context.init(null, [trustManager] as TrustManager[], null)
context.socketFactory.createSocket(host, port as int).with {
    startHandshake()
    close()
}

certout "-----BEGIN CERTIFICATE-----"
certout cert.encoded.encodeBase64(true)
certout "-----END CERTIFICATE-----"
if (options.f){
 println "keytool -printcert -file ${options.f}".execute().text.split("\nExtensions:")[0]
 println "For more details (including extensions):"
 println "keytool -printcert -file ${options.f}"
}



